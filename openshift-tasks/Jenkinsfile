#!groovy
podTemplate(
        label: "skopeo-pod",
        cloud: "openshift",
        inheritFrom: "maven",
        containers: [
                containerTemplate(
                        name: "jnlp",
                        image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
                        resourceRequestMemory: "1Gi",
                        resourceLimitMemory: "2Gi",
                        resourceRequestCpu: "1",
                        resourceLimitCpu: "2"
                )
        ]
) {
    node('skopeo-pod') {
        // Define Maven Command to point to the correct
        // settings for our Nexus installation
        def mavenCommand = "mvn -s ../nexus_settings.xml"

        // Checkout Source Code.
        stage('Checkout Source') {
            checkout scm
        }

        // Build the Tasks Service
        dir("openshift-tasks") {
            def groupId = getGroupIdFromPom("pom.xml")
            def artifactId = getArtifactIdFromPom("pom.xml")
            def version = getVersionFromPom("pom.xml")

            def devTag = version + "-" + currentBuild.number
            def prodTag = version

            // Using Maven build the war file
            // Do not run tests in this step
            stage('Build war') {
                echo "Building version ${version}"

                // Execute Maven Build
                sh "$mavenCommand package -DskipTests=true"
            }

            // The next two stages should run in parallel
            
            // Using Maven run the unit tests
            stage('Unit Tests') {
                echo "Running Unit Tests"
                
                // Execute Unit Tests
                sh "$mavenCommand test"
            }

            // Using Maven to call SonarQube for Code Analysis
            stage('Code Analysis') {
                echo "Running Code Analysis"
                    
                // Execute Sonarqube Tests
                sh "$mavenCommand sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
            }

            // Publish the built war file to Nexus
            stage('Publish to Nexus') {
                echo "Publish to Nexus"
                    
                // Publish to Nexus
                sh "$mavenCommand deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
            }

            // Build the OpenShift Image in OpenShift and tag it.
            stage('Build and Tag OpenShift Image') {
                echo "Building OpenShift container image tasks:${devTag}"

                // Build Image, tag Image
                sh "oc start-build tasks --follow --from-file=http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/${groupId.replaceAll('\\.', '/')}/$artifactId/$version/${artifactId}-${version}.war -n ${GUID}-tasks-dev"

                openshiftTag alias: 'false', destStream: 'tasks', destTag: devTag, destinationNamespace: '${GUID}-tasks-dev', namespace: '${GUID}-tasks-dev', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
            }

            // Deploy the built image to the Development Environment.
            stage('Deploy to Dev') {
                echo "Deploying container image to Development Project"

                // Deploy to development Project
                //      Set Image, Set VERSION
                //      Make sure the application is running and ready before proceeding
                sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag} -n ${GUID}-tasks-dev"

                sh "oc set env dc/tasks VERSION='$devTag (tasks-dev)' -n $GUID-tasks-dev"

                sh "oc delete configmap tasks-config -n ${GUID}-tasks-dev --ignore-not-found=true"
                sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-tasks-dev"

                openshiftDeploy depCfg: 'tasks', namespace: '${GUID}-tasks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
                openshiftVerifyDeployment depCfg: 'tasks', namespace: '${GUID}-tasks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
                openshiftVerifyService namespace: '${GUID}-tasks-dev', svcName: 'tasks', verbose: 'false'
            }

            // Copy Image to Nexus container registry
            stage('Copy Image to Nexus Docker Registry') {
                echo "Copy image to Nexus Docker Registry"

                // Copy image to Nexus container registry
                sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

                // Tag the built image with the production tag.
                openshiftTag alias: 'false', destStream: 'tasks', destTag: prodTag, destinationNamespace: '${GUID}-tasks-dev', namespace: '${GUID}-tasks-dev', srcStream: 'tasks', srcTag: devTag, verbose: 'false'
            }

            // Blue/Green Deployment into Production
            // -------------------------------------
            def destApp = "tasks-green"
            def activeApp = ""

            stage('Blue/Green Production Deployment') {
                // Determine which application is active
                //      Set Image, Set VERSION
                //      Deploy into the other application
                //      Make sure the application is running and ready before proceeding
                    
                activeApp = sh(returnStdout: true, script: "oc get route tasks -n ${GUID}-tasks-prod -o jsonpath='{ .spec.to.name }'").trim()
                if (activeApp == "tasks-green") {
                    destApp = "tasks-blue"
                }
                echo "Active Application:      " + activeApp
                echo "Destination Application: " + destApp

                sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${prodTag} -n ${GUID}-tasks-prod"

                ['blue', 'green'].each {
                    sh "oc set env dc/tasks-$it VERSION='$prodTag (tasks $it)' -n $GUID-tasks-prod"
                }

                sh "oc delete configmap ${destApp}-config -n ${GUID}-tasks-prod --ignore-not-found=true"
                sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-tasks-prod"

                openshiftDeploy depCfg: destApp, namespace: '${GUID}-tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
                openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
                openshiftVerifyService namespace: '${GUID}-tasks-prod', svcName: destApp, verbose: 'false'
            }

            stage('Switch over to new Version') {
                echo "Switching Production application to ${destApp}."
                
                // Execute switch
                sh 'oc patch route tasks -n ${GUID}-tasks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
            }
        }
    }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
// Those lines were modified to ease my life for the homework. Using String instead of just def let the IDE help me.
String getVersionFromPom(pom) {
    def matcher = readFile(pom) =~ '<version>(.+)</version>'
    matcher ? matcher[0][1] : null
}

String getGroupIdFromPom(pom) {
    def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
    matcher ? matcher[0][1] : null
}

String getArtifactIdFromPom(pom) {
    def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
    matcher ? matcher[0][1] : null
}
